//*********************************************************
//*	Joshua Baker
//*	CSCI 361
//*	4/30/15
//*	Mini-Project
//*	10368442
//*********************************************************

import java.net.*;
import java.io.*;
import java.util.*;

public class Client {
System.out.println("Connect to host IP and port? : ");

	public static void main(String... args) throws Exception 
	{
		if (args.length < 1) {
	         System.out.println("Connect to host IP and port? : "); // prints when there is no input 
	         return;
	    }
		final String host = args[0]; 
		final int port = Integer.parseInt(args[1]); 
		Socket soc = new Socket(host, port);
		ClientThread thread = new ClientThread(soc);
		thread.Menu();

	}
}


class ClientThread {
	Socket ClientSoc;

	DataInputStream is;
	DataOutputStream os;
	BufferedReader br;

	ClientThread(Socket soc) {
		try {
			ClientSoc = soc;
			is = new DataInputStream(ClientSoc.getInputStream());
			os = new DataOutputStream(ClientSoc.getOutputStream());
			br = new BufferedReader(new InputStreamReader(System.in));
		} catch (Exception ex) {
		}
	}

	Boolean LogOn() throws Exception {

		os.writeUTF("LOGON");

		System.out.print("Enter username: ");//prompts user for username
		String userName = br.readLine();
		os.writeUTF(userName);

		System.out.print("Enter password: ");// prompts user for password
		String password = br.readLine();
		System.out.print("\n\n");
		os.writeUTF(password);

		String msgFromServer = is.readUTF();

		if (msgFromServer.compareTo("Connected") == 0) { //compares response from server to known good auth
			System.out.println(msgFromServer + "\n\n");
			return true;
		}
		System.out.println(msgFromServer + "\n\n");
		return false;
	}

	void SendFile() throws Exception {

		String filename;
		System.out.print("Enter file name: ");
		filename = br.readLine();

		File f = new File(filename);
		if (!f.exists()) {
			System.out.println("File does not exist.");
			os.writeUTF("File not found");
			return;
		}

		os.writeUTF(filename);

		String msgFromServer = is.readUTF();
		if (msgFromServer.compareTo("File already exists") == 0) {
			String Option;
			System.out.println("File already exists. Want to OverWrite (Y/N) ?");
			Option = br.readLine();
			if (Option == "Y") {
				os.writeUTF("Y");
			} else {
				os.writeUTF("N");
				return;
			}
		}

		System.out.println("Sending File ...");
		FileInputStream fin = new FileInputStream(f);
		int ch;
		do {
			ch = fin.read();
			os.writeUTF(String.valueOf(ch));
		} while (ch != -1);
		fin.close();
		System.out.println(is.readUTF());

	}

	void ReceiveFile() throws Exception {
		String fileName;
		System.out.print("Enter File Name :");
		fileName = br.readLine();
		os.writeUTF(fileName);
		String msgFromServer = is.readUTF();

		if (msgFromServer.compareTo("File Not Found") == 0) {
			System.out.println("File not found on Server ...");
			return;
		} else if (msgFromServer.compareTo("READY") == 0) {
			System.out.println("Receiving File ...");
			File f = new File(fileName);
			if (f.exists()) {
				String Option;
				System.out.println("File Already Exists. Want to OverWrite (Y/N) ?");
				Option = br.readLine();
				if (Option == "N") {
					os.flush();
					return;
				}
			}
			FileOutputStream fout = new FileOutputStream(f);
			int ch;
			String temp;
			do {
				temp = is.readUTF();
				ch = Integer.parseInt(temp);
				if (ch != -1) {
					fout.write(ch);
				}
			} while (ch != -1);
			fout.close();
			System.out.println(is.readUTF());

		}

	}

	public void Menu() throws Exception {
		boolean logon = false;
		while (!logon) {
			logon = LogOn();
		}

		while (true) {
			
			System.out.println("\t1. View server directory and files\t");//these are out of order but work correctly
			System.out.println("\t2. Change server directory\t\t");//out of order because the interface was not 
			System.out.println("\t3. Send file from client directory\t");//very user friendly.
			System.out.println("\t4. Receive file from server directory\t");//too lazy to change
			System.out.println("\t5. Log Out\t\t\t\t");
			System.out.print("\nEnter a number for an action: ");
			int choice;
			choice = Integer.parseInt(br.readLine());
			System.out.print("\n\n");
			if (choice == 3) {
				os.writeUTF("SEND");//self explanitory client requests to server
				SendFile();
				System.out.print("\n\n");
			} else if (choice == 4) {
				os.writeUTF("GET");//each one is a selection 
				ReceiveFile();
				System.out.print("\n\n");
			} else if (choice == 1) {
				os.writeUTF("DIR");// that sends the command to the server
				System.out.println(is.readUTF());
				System.out.println(is.readUTF());
				System.out.print("\n\n");

			} else if (choice == 2) {
				os.writeUTF("CD");//and the server does magic
				System.out.println("Enter new directory: ");
				os.writeUTF(br.readLine());
				System.out.println(is.readUTF());
				System.out.print("\n\n");

			} else {
				os.writeUTF("DISCONNECT");// and you get you requests sent back or you exit
				System.out.print("\n\n");
				System.exit(1);
			}
		}
	}
}
